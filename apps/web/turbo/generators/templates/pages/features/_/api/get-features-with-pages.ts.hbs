import {
  PageNumberPaginationMeta,
  PageNumberPaginationOptions
} from 'schema/dist/common/pagination';
import { {{pascalCase name}}Response } from 'schema/dist/{{kebabCase name}}';

import { axios } from '@/lib/axios';
import {
  QUERY_KEYS,
  useInfiniteQuery,
  type ExtractFnReturnType,
  type InfiniteQueryConfig,
} from '@/lib/react-query';

export const get{{pascalCase name}}sWithPages = ({
  pageParam = 1,
}: {
  pageParam: number;
}): Promise<[{{pascalCase name}}Response[], PageNumberPaginationMeta]> => {
  const params: PageNumberPaginationOptions = {
    page: pageParam,
    limit: 10,
  };

  return axios.get(`/{{kebabCase name}}s/pages`, { params });
};

type QueryFnType = typeof get{{pascalCase name}}sWithPages;

type Use{{pascalCase name}}sWithPagesOptions = {
  config?: InfiniteQueryConfig<QueryFnType>;
};

export const use{{pascalCase name}}sWithPages = ({ config }: Use{{pascalCase name}}sWithPagesOptions = {}) => {
  return useInfiniteQuery<ExtractFnReturnType<QueryFnType>>({
    ...config,
    queryKey: [QUERY_KEYS.{{constantCase name}}S],
    queryFn: ({ pageParam }) => get{{pascalCase name}}sWithPages({ pageParam }),
    getNextPageParam: (lastPage) => {
      return lastPage[1].nextPage;
    },
  });
};
